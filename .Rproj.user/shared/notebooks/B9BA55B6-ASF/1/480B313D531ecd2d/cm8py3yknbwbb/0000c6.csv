"0","vg_param <- as.numeric(vgfit$param)"
"0",""
"0","c <- vg_param[1]"
"0","sigma <- vg_param[2]"
"0","theta <- vg_param[3]"
"0","nu <- vg_param[4]"
"0",""
"0","Time <- 1/4 # option maturity = 3 months"
"0","N <- 100    # number of steps for each path"
"0","r <- 0.01   # arbitrary risk-free rate"
"0","nsim <- 100  # number of simulated path"
"0",""
"0","# Variance Gamma function"
"0","VG <- function(sigma, nu, theta, Tf, N, r) {"
"0","  a <- 1 / nu"
"0","  b <- 1 / nu"
"0","  h <- Time / N"
"0","  Time <- (0:N) * Time / N"
"0","  X <- rep(0, N + 1)"
"0","  I <- rep(0, N)"
"0","  X[1] <- 0"
"0","  "
"0","  for (i in 1:N) {"
"0","    I[i] <- rgamma(1, a * h, b)"
"0","    X[i + 1] <- X[i] + theta * I[i] + sigma * sqrt(I[i]) * rnorm(1)"
"0","  }"
"0","  "
"0","  return((X))"
"0","}"
"0",""
"0","VG_paths <- matrix(nrow = nsim, ncol = N + 1) # fill the matrix with random paths that follow"
"0",""
"0","for (i in 1:nsim) { # the function VG just created"
"0","  VG_paths[i, ] <- VG(sigma, nu, theta, Time, N, r)"
"0","}"
"0",""
"0","VG_paths %>%"
"0","  t() %>%"
"0","  format(scientific = TRUE, digits = 2) %>%"
"0","  datatable()"
