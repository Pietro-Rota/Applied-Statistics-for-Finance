"0","FFTcall.price <- function(phi, S0, K, r, Time, alpha = 1, N = 2^12, eta = 0.25) {"
"0","  m <- r - log(phi(-(0 + 1i)))"
"0","  phi.tilde <- function(u) (phi(u) * exp((0 + 1i) * u * m))^Time"
"0","  psi <- function(v) {"
"0","    exp(-r * Time) * phi.tilde((v - (alpha + 1) * (0 + 1i))) /"
"0","      (alpha^2 + alpha - v^2 + (0 + 1i) * (2 * alpha + 1) * v)"
"0","  }"
"0","  lambda <- (2 * pi) / (N * eta)"
"0","  b <- 1 / 2 * N * lambda"
"0","  ku <- -b + lambda * (0:(N - 1))"
"0","  v <- eta * (0:(N - 1))"
"0","  tmp <- exp((0 + 1i) * b * v) * psi(v) * eta * (3 + (-1)^(1:N) - ((1:N) - 1 == 0)) / 3"
"0","  ft <- fft(tmp)"
"0","  res <- exp(-alpha * ku) * ft / pi"
"0","  inter <- spline(ku, Re(res), xout = log(K / S0))"
"0","  return(inter$y * S0)"
"0","} "
"0",""
"0",""
"0","phiBS <- function(u) exp((0+1i) * u * (mu - 0.5 * sigma^2) - 0.5 * sigma^2 * u^2)"
"0",""
"0","mu <- 1"
"0",""
"0","FFT <- FFTcall.price(phiBS, S0 = S0, K = K, r = r, Time = Time)"
"0",""
"0","cat(""Call price according to Monte Carlo"", FFT, ""with a diffference of"", FFT-C, ""\n"")"
"1","Call price according to Monte Carlo"
"1"," "
"1","1.984243"
"1"," "
"1","with a diffference of"
"1"," "
"1","0.003736918"
"1"," "
"1","
"
